aqua SecretHolderFuncs declares *

import "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/aqua-lib/subnet.aqua"
import "services.aqua"

import SecretGiverService, GetSecretResult as LocalGetSecretResult, GenerateKeysResult, onLocalSecretSender, onLocalSecretSaver from "secret_worker/local.aqua"
import Id, id, errorOk, WorkerError from "common.aqua"
import onWorkerSecretSender, onWorkerSecretSaver from "secret_worker/worker.aqua"
import Save, SaveSecretResult, SecretSaver from "secret_worker/saver.aqua"
import SecretSender from "secret_worker/getter.aqua"

export saveSecretOnWorkers, getSecret, initializeSecret, initializeMultiWorkerSecret, getAvailableForUseSecrets, getOwnableSecrets, changeSecretVisibility, checkIsSecretAvailableForUse, checkIsSecretOwner, deleteSecret, getSecretMetadata, updateSecretExpiration, initializeSecretHolder, permitRole, getRole, revokeRole

data WorkerSaveSecretResult:
    workerId: Id
    value: SaveSecretResult

func emptySaveSecret() -> Save:
    <- Save(secretId = Id(id=""))

func saveSecret{SecretSaver, SecretSender}(secretId: Id) -> SaveSecretResult:
    result: *SaveSecretResult
    try:
        key <- SecretSaver.prepareGetSecret()
        if !key.error.is_ok:
            result <<- SaveSecretResult(value=emptySaveSecret(), error=key.error)
        else:
            secret <- SecretSender.getSecret(secretId, key.value.recieverPublicKey)
            if !secret.error.is_ok:
                result <<- SaveSecretResult(value=emptySaveSecret(), error=secret.error)
            else: 
                result <<- SecretSaver.saveSecret(key.value, secret.value)
    catch e:
        error = Error(is_ok=false, message=e.message)
        result <<- SaveSecretResult(value=emptySaveSecret(), error=error)

    <- result!

ability SecretWorker:
    sender: SecretSender
    saver: SecretSaver

func getLocalToWorkerWithExpiration(secretExpiredAt: u64) -> Worker -> SecretWorker:
    result = func (w: Worker) -> SecretWorker:
        sender = onLocalSecretSender()
        saver = onWorkerSecretSaver(w, secretExpiredAt)
        <- SecretWorker(sender, saver)

    <- result

func workerToLocal(w: Worker) -> SecretWorker:
    sender = onWorkerSecretSender(w)
    saver = onLocalSecretSaver()
    <- SecretWorker(sender, saver)

func sendSecret(secretId: Id, workers: []Worker, abilityBuilder: Worker -> SecretWorker) -> []WorkerSaveSecretResult:
    result: *WorkerSaveSecretResult
    for w <- workers par:
        worker <- abilityBuilder(w)
        save_result <- saveSecret{worker.saver, worker.sender}(secretId)
        result <<- WorkerSaveSecretResult(workerId=id(w.worker_id!), value=save_result)

    join result[workers.length - 1]
    par Peer.timeout(3000, "timeout")

    <- result

func saveSecretOnWorkers(secretId: Id, expiredAt: u64, workers: []Worker) -> []WorkerSaveSecretResult:
    <- sendSecret(secretId, workers, getLocalToWorkerWithExpiration(expiredAt))

func getSecret(secretId: Id, workers: []Worker) -> []WorkerSaveSecretResult:
    <- sendSecret(secretId, workers, workerToLocal)

func deleteSecret(secretId: Id, workers: []Worker) -> []WorkerError:
    result: *WorkerError
    for w <- workers:
        on w.worker_id! via w.host_id:
            try:
                result <<- WorkerError(workerId=id(w.worker_id!), error=SecretHolder.delete_secret(secretId.id))
            catch e:
                error = Error(is_ok=false, message=e.message)
                result <<- WorkerError(workerId=id(w.worker_id!), error=error)

    <- result


service SecretInitializer:
    secret_initiate_handshake(secret_id: string, iteration: u8, users_count: u8) -> Error

data StepService:
    srvId: string
    step: u8

func initializeSecret(worker: Worker, secretId: Id, servicesCount: u8, firstRun: []StepService, secondRun: []StepService) -> []Error:
    result: *Error
    try:
        on worker.worker_id! via worker.host_id:
            step0 = SecretHolder.secret_key_init(secretId.id, 0, servicesCount)
            result <<- step0
            if !step0.is_ok:
                result <<- Error(is_ok=false, message="Failed to initialize secret")
            else:
                for s <- firstRun:
                    SecretInitializer s.srvId
                    result <<- SecretInitializer.secret_initiate_handshake(secretId.id, s.step, servicesCount)
                
                res = SecretHolder.secret_key_init(secretId.id, servicesCount, servicesCount)
                result <<- res
                if res.is_ok:
                    for s <- secondRun:
                        SecretInitializer s.srvId
                        result <<- SecretInitializer.secret_initiate_handshake(secretId.id, s.step, servicesCount)
    catch e:
        result <<- Error(is_ok=false, message=e.message)

    <- result

data WorkerErrors:
    workerId: Id
    error: []Error

func initializeMultiWorkerSecret(workers: []Worker, secretId: Id, servicesCount: u8, firstRun: []StepService, secondRun: []StepService) -> []WorkerErrors:
    result: *WorkerErrors
    for w <- workers:
        result <<- WorkerErrors(workerId=id(w.worker_id!), error=initializeSecret(w, secretId, servicesCount, firstRun, secondRun))

    <- result

data GetAvailableSecretsResult:
    workerId: Id
    value: GetAllAvailableSecretsResult

func getAvailableForUseSecrets(workers: []Worker) -> []GetAvailableSecretsResult:
    result: *GetAvailableSecretsResult
    for w <- workers:
        on w.worker_id! via w.host_id:
            try: 
                result <<- GetAvailableSecretsResult(workerId=id(w.worker_id!), value=SecretHolder.get_all_available_for_use_secrets())
            catch e:
                error = Error(is_ok=false, message=e.message)
                value = GetAllAvailableSecretsResult(value=GetAllAvailableSecrets(secret_ids=[]), error=error)
                result <<- GetAvailableSecretsResult(workerId=id(w.worker_id!), value=value)
        
    <- result

func getOwnableSecrets(workers: []Worker) -> []GetAvailableSecretsResult:
    result: *GetAvailableSecretsResult
    for w <- workers:
        on w.worker_id! via w.host_id:
            try: 
                result <<- GetAvailableSecretsResult(workerId=id(w.worker_id!), value=SecretHolder.get_all_ownable_secrets())
            catch e:
                error = Error(is_ok=false, message=e.message)
                value = GetAllAvailableSecretsResult(value=GetAllAvailableSecrets(secret_ids=[]), error=error)
                result <<- GetAvailableSecretsResult(workerId=id(w.worker_id!), value=value)
        
    <- result

func changeSecretVisibility(secretId: Id, visibility: bool, workers: []Worker) -> []WorkerError:
    result: *WorkerError

    for w <- workers:
        on w.worker_id! via w.host_id:
            try:
                result <<- WorkerError(workerId=id(w.worker_id!), error=SecretHolder.change_visibility(secretId.id, visibility))
            catch e:
                error = Error(is_ok=false, message=e.message)
                result <<- WorkerError(workerId=id(w.worker_id!), error=error)

    <- result

func updateSecretExpiration(secretId: Id, expiredAt: u64, workers: []Worker) -> []WorkerError:
    result: *WorkerError
    for w <- workers:
        on w.worker_id! via w.host_id:
            try:
                result <<- WorkerError(workerId=id(w.worker_id!), error=SecretHolder.update_expiration(secretId.id, expiredAt))
            catch e:
                error = Error(is_ok=false, message=e.message)
                result <<- WorkerError(workerId=id(w.worker_id!), error=error)

    <- result

func checkIsSecretAvailableForUse(secretId: Id, workers: []Worker) -> []WorkerError:
    result: *WorkerError
    for w <- workers:
        on w.worker_id! via w.host_id:
            try:
                result <<- WorkerError(workerId=id(w.worker_id!), error=SecretHolder.is_secret_available_for_use(secretId.id))
            catch e:
                error = Error(is_ok=false, message=e.message)
                result <<- WorkerError(workerId=id(w.worker_id!), error=error)

    <- result

func checkIsSecretOwner(secretId: Id, workers: []Worker) -> []WorkerError:
    result: *WorkerError
    for w <- workers:
        on w.worker_id! via w.host_id:
            try:
                result <<- WorkerError(workerId=id(w.worker_id!), error=SecretHolder.is_secret_owner(secretId.id))
            catch e:
                error = Error(is_ok=false, message=e.message)
                result <<- WorkerError(workerId=id(w.worker_id!), error=error)

    <- result

data WorkerSecretMetadata:
    workerId: Id
    value: SecretMetadataResult

func getSecretMetadata(secretId: Id, workers: []Worker) -> []WorkerSecretMetadata:
    result: *WorkerSecretMetadata
    for w <- workers:
        on w.worker_id! via w.host_id:
            try:
                result <<- WorkerSecretMetadata(workerId=id(w.worker_id!), value=SecretHolder.get_secret_metadata(secretId.id))
            catch e:
                error = Error(is_ok=false, message=e.message)
                value = SecretMetadataResult(value=SecretMetadata(owner="", is_anyone_can_use=false, expired_at=0), error=error)
                result <<- WorkerSecretMetadata(workerId=id(w.worker_id!), value=value)

    <- result

func initializeSecretHolder(workers: []Worker) -> []WorkerError:
    res: *WorkerError
    
    for w <- workers:
        if w.worker_id != nil:
            on w.worker_id! via w.host_id:
                initResult = SecretHolder.initialize()
                res <<- WorkerError(workerId=id(w.worker_id!), error=initResult)
        else:
            error = Error(is_ok=false, message="Worker id is nil")
            res <<- WorkerError(workerId=id(""), error=error)
    
    <- res

func permitRole(secretId: Id, userId: Id, role: string, workers: []Worker) -> []WorkerError:
    result: *WorkerError
    for w <- workers:
        on w.worker_id! via w.host_id:
            try:
                result <<- WorkerError(workerId=id(w.worker_id!), error=SecretHolder.permit_role(secretId.id, userId.id, role))
            catch e:
                error = Error(is_ok=false, message=e.message)
                result <<- WorkerError(workerId=id(w.worker_id!), error=error)

    <- result

data WorkerGetUserRoleResult:
    workerId: Id
    value: GetUserRoleResult

func getRole(secretId: Id, userId: Id, workers: []Worker) -> []WorkerGetUserRoleResult:
    result: *WorkerGetUserRoleResult
    for w <- workers:
        on w.worker_id! via w.host_id:
            try:
                result <<- WorkerGetUserRoleResult(workerId=id(w.worker_id!), value=SecretHolder.get_user_role(secretId.id, userId.id)) 
            catch e:
                error = Error(is_ok=false, message=e.message)
                role = GetUserRole(role="")
                value = GetUserRoleResult(value=role, error=error)
                result <<- WorkerGetUserRoleResult(workerId=id(w.worker_id!), value=value)

    <- result

func revokeRole(secretId: Id, userId: Id, workers: []Worker) -> []WorkerError:
    result: *WorkerError
    for w <- workers:
        on w.worker_id! via w.host_id:
            try:
                result <<- WorkerError(workerId=id(w.worker_id!), error=SecretHolder.revoke_role(secretId.id, userId.id))
            catch e:
                error = Error(is_ok=false, message=e.message)
                result <<- WorkerError(workerId=id(w.worker_id!), error=error)

    <- result
    